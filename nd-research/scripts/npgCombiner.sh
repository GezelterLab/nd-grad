#!/bin/bash
# Copyright (c) 2019-2024 Cody R. Drisko. All rights reserved.
# Licensed under the MIT License. See the LICENSE file in the project root for more information.
#
# Name: npgCombiner.sh - Version 1.1.1
# Author: crdrisko
# Date: 11/22/2024-08:27:58
# Description: Remove graphene sheets from a simulation box


### Functions ###
source errorHandling
source typeParsing

printHelpMessage()      #@ DESCRIPTION: Print the npgCombiner program's help message
{                       #@ USAGE: printHelpMessage
    printf "\nUSAGE: npgCombiner [-hv] [-i FILE] [-o FILE] -t [DOUBLE]\n\n"
    printf "  -h  Prints help information about the npgCombiner program.\n"
    printf "  -v  Verbose mode. Defaults to false/off.\n\n"
    printf "  -i  REQUIRED: The input file name.\n"
    printf "  -o  OPTIONAL: The name of the desired output omd file. Defaults to the input\n"
    printf "        file name ending with \"_completed.omd\".\n"
    printf "  -t  OPTIONAL: The O-H bond length tolerance to set in waterReplacer.\n"
    printf "        Defaults to 0.45.\n\n"
    printf "EXAMPLE: npgCombiner -i saltWater.omd -o saltWater_done.omd -v\n\n"
}

printMetaDataSection()      #@ DESCRIPTION: Print a sample OpenMD metaData section
{                           #@ USAGE: printMetaDataSection
    printf "\nensemble = NVT;\n"
    printf "forceField = \"ChargedSPF\";\n"
    printf "forceFieldFileName = \"ChargedSPF.frc\";\n"
    printf "electrostaticSummationMethod = \"shifted_force\";\n"
    printf "electrostaticScreeningMethod = \"damped\";\n"
    printf "cutoffRadius = 12;\n"
    printf "dampingAlpha = 0.18;\n"
    printf "seed = 8675309;\n\n"
    printf "targetTemp = 300;\n"
    printf "targetPressure = 1.0;\n"
    printf "tauThermostat = 1e3;\n"
    printf "tauBarostat = 1e4;\n\n"
    printf "dt = 1.0;\n"
    printf "runTime = 5e3;\n\n"
    printf "sampleTime = 10000;\n"
    printf "statusTime = 1000;\n\n"
}


### Initial Variables / Default Values ###
declare inputDir inputFile outputDir outputFile tempDir verbose

tempDir=$PWD
verbose=0
tolerance=0.45


### Runtime Configuration ###
while getopts i:o:t:vh opt
do
    case $opt in
        i) FILE input  = "$OPTARG" ;;                       ## Returns inputFile and inputDir variables
        o) FILE output = "$OPTARG" ;;                       ## Returns outputFile and outputDir variables
        t) tolerance="$OPTARG" ;;
        v) export verbose=1 ;;
        h) printHelpMessage && printFatalErrorMessage 0 ;;
        *) printFatalErrorMessage 1 "Invalid option flag passed to program." ;;
    esac
done


### Main Code ###
if [[ -d "$inputDir" ]]
then
    cd "$inputDir" || printFatalErrorMessage 2 "Could not change into required directory."

    if [[ ! -f ${inputFile:?An input file is required.} ]]      ## Check existence of file
    then
        printf -v fileErrorMessage "Sorry, we couldn't find %s here." "$inputFile"
        printFatalErrorMessage 3 "$fileErrorMessage"
    fi

    module load openmd &>/dev/null

    temporaryOMDFileName="${inputFile%%.*}_noSheet.omd"
    temporaryXYZFileName="${inputFile%%.*}_noSheet.xyz"

    Dump2XYZ -m -b -i "$inputFile" -o "$temporaryXYZFileName" --selection="select all and not graphene"

    ## Take the MetaData through FrameData sections of the omd file generated by atom2omd ##
    atom2omd -ixyz "$temporaryXYZFileName" -oomd "$temporaryOMDFileName"

    modifyFiles -i "$temporaryOMDFileName" -o "$(grep Hmat $temporaryOMDFileName)" -n "$(grep Hmat $inputFile)"

    metaDataLineNumber="$( grep -n \</MetaData\> "$temporaryOMDFileName" )"
    head -n $(( ${metaDataLineNumber%%:*} - 1 )) "$temporaryOMDFileName" > tempFile

    printMetaDataSection >> tempFile

    frameDataLineNumber="$( grep -n \</FrameData\> "$temporaryOMDFileName" )"
    head -n "${frameDataLineNumber%%:*}" "$temporaryOMDFileName" | tail -n +"${metaDataLineNumber%%:*}" >> tempFile

    ## Take the StuntDouble section of the omd file generated by waterReplacer ##
    waterReplacer -x "$temporaryXYZFileName" -o "${temporaryOMDFileName%%.*}2.omd" -t "$tolerance"

    sed '/<StuntDoubles>/,$!d' "${temporaryOMDFileName%%.*}2.omd" >> tempFile

    rm "${temporaryOMDFileName%%.*}2.omd"
    mv tempFile "${outputFile:=${inputFile%%.*}_completed.omd}"

    cd "$tempDir" || printFatalErrorMessage 4 "Could not change into required directory."

    if [[ -n "$outputDir" ]]
    then
        if [[ -d "$outputDir" ]]
        then
            cd "$outputDir" || printFatalErrorMessage 5 "Could not change into required directory."

            mv "$inputDir/$outputFile" "$outputDir/$outputFile"
        else
            printFatalErrorMessage 6 "Invalid directory."
        fi
    fi
else
    printFatalErrorMessage 7 "Invalid directory."
fi
